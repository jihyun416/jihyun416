---
layout: post
title:  NestJS - Asynchronous providers
author: Jihyun
category: nestjs
tags:
- nestjs
date: 2021-10-05 17:20 +0900
---

### Asynchronous providers

At times, the application start should be delayed until one or more **asynchronous tasks** are completed. For example, you may not want to start accepting requests until the connection with the database has been established. You can achieve this using asynchronous providers.

The syntax for this is to use `async/await` with the `useFactory` syntax. The factory returns a `Promise`, and the factory function can `await` asynchronous tasks. Nest will await resolution of the promise before instantiating any class that depends on (injects) such a provider.

때때로 애플리케이션 시작은 하나 이상의 **비동기 작업**이 완료될 때까지 지연되어야 합니다. 예를 들어, 데이터베이스와의 연결이 설정될 때까지 요청 수락을 시작하지 않을 수 있습니다. 비동기 프로바이더를 사용하여 이를 달성할 수 있습니다.

이에 대한 구문은 `useFactory` 구문과 함께 `async/await`를 사용하는 것입니다. 팩토리는 `Promise`를 반환하고 팩토리 함수는 비동기 작업을 `await`할 수 있습니다. Nest는 그러한 프로바이더에 의존하는 (주입하는) 클래스를 인스턴스화하기 전에 promise의 해결을 기다립니다.

```typescript
{
  provide: 'ASYNC_CONNECTION',
  useFactory: async () => {
    const connection = await createConnection(options);
    return connection;
  },
}
```

> **HINT**
>
> Learn more about custom provider syntax [here](https://docs.nestjs.com/fundamentals/custom-providers).
>
> 사용자 지정 프로바이더 구문에 대한 자세한 내용은 [여기](https://docs.nestjs.kr/fundamentals/custom-providers)를 참조하세요.

## Injection

Asynchronous providers are injected to other components by their tokens, like any other provider. In the example above, you would use the construct `@Inject('ASYNC_CONNECTION')`.

비동기 프로바이더는 다른 프로바이더와 마찬가지로 토큰에 의해 다른 구성 요소에 삽입됩니다. 위의 예에서는 `@Inject('ASYNC_CONNECTION')`구문을 사용합니다.



## Example

[The TypeORM recipe](https://docs.nestjs.com/recipes/sql-typeorm) has a more substantial example of an asynchronous provider.

[TypeORM 레시피](https://docs.nestjs.kr/recipes/sql-typeorm)에는 비동기 프로바이더의 보다 실질적인 예가 있습니다.



#### 출처

> https://docs.nestjs.com/fundamentals/async-providers
>
> https://docs.nestjs.kr/fundamentals/async-providers

